# This package is to be installed from outside the chroot.
# Removal of this package isn't supported!

pkgbuild_version=4
pkgname=filesystem
pkgver=0

backup=(
    '/etc/passwd'
    '/etc/group'
)
dependencies=(
    "!$pkgname"
)

lfs_me_prepare() {
    return
}

lfs_me_build() {
    cd "$build_dir"
    cat > passwd << "EOF"
root:x:0:0:root:/root:/bin/bash
bin:x:1:1:bin:/dev/null:/bin/false
daemon:x:6:6:Daemon User:/dev/null:/bin/false
messagebus:x:18:18:D-Bus Message Daemon User:/var/run/dbus:/bin/false
systemd-bus-proxy:x:72:72:systemd Bus Proxy:/:/bin/false
systemd-journal-gateway:x:73:73:systemd Journal Gateway:/:/bin/false
systemd-journal-remote:x:74:74:systemd Journal Remote:/:/bin/false
systemd-journal-upload:x:75:75:systemd Journal Upload:/:/bin/false
systemd-network:x:76:76:systemd Network Management:/:/bin/false
systemd-resolve:x:77:77:systemd Resolver:/:/bin/false
systemd-timesync:x:78:78:systemd Time Synchronization:/:/bin/false
nobody:x:99:99:Unprivileged User:/dev/null:/bin/false
EOF

    cat > group << "EOF"
root:x:0:
bin:x:1:daemon
sys:x:2:
kmem:x:3:
tape:x:4:
tty:x:5:
daemon:x:6:
floppy:x:7:
disk:x:8:
lp:x:9:
dialout:x:10:
audio:x:11:
video:x:12:
utmp:x:13:
usb:x:14:
cdrom:x:15:
adm:x:16:
messagebus:x:18:
systemd-journal:x:23:
input:x:24:
mail:x:34:
systemd-bus-proxy:x:72:
systemd-journal-gateway:x:73:
systemd-journal-remote:x:74:
systemd-journal-upload:x:75:
systemd-network:x:76:
systemd-resolve:x:77:
systemd-timesync:x:78:
nogroup:x:99:
users:x:999:
EOF
}

lfs_me_check() {
    return
}

lfs_me_install() {
    #directories for virtual filesystems
    mkdir -pv "$fakeroot_dir"/{dev,proc,sys,run}

    #creating /
    mkdir -pv "$fakeroot_dir"/{boot,etc/{opt,sysconfig},home,mnt,opt}
    mkdir -pv "$fakeroot_dir"/{media/{floppy,cdrom},srv,var}
    install -dv -m 0750 "$fakeroot_dir"/root
    install -dv -m 1777 "$fakeroot_dir"/tmp "$fakeroot_dir"/var/tmp

    #creating /usr
    mkdir -pv "$fakeroot_dir"/usr/{,local/}{bin,include,lib,sbin,src}
    mkdir -pv "$fakeroot_dir"/usr/{,local/}share/{color,dict,doc,info,locale,man}
    mkdir -v  "$fakeroot_dir"/usr/{,local/}share/{misc,terminfo,zoneinfo}
    mkdir -v  "$fakeroot_dir"/usr/libexec
    mkdir -pv "$fakeroot_dir"/usr/{,local/}share/man/man{1..8}

    #creating symlinks
    ln -sv usr/bin "${fakeroot_dir}/bin"
    ln -sv usr/bin "${fakeroot_dir}/sbin"
    ln -sv usr/lib "${fakeroot_dir}/lib"
    case $(uname -m) in
    x86_64)
        ln -sv usr/lib  "$fakeroot_dir"/lib64
        ln -sv lib "$fakeroot_dir"/usr/lib64
        ln -sv lib "$fakeroot_dir"/usr/local/lib64 ;;
    esac

    #creating /var
    mkdir -v "$fakeroot_dir"/var/{log,mail,spool}
    ln -sv /run "$fakeroot_dir"/var/run
    ln -sv /run/lock "$fakeroot_dir"/var/lock
    mkdir -pv "$fakeroot_dir"/var/{opt,cache,lib/{color,misc,locate},local}

    #creating toolchain symlinks
    ln -sv /tools/bin/{bash,cat,echo,pwd,stty,perl} "${fakeroot_dir}/usr/bin"
    ln -sv /tools/lib/libgcc_s.so{,.1} "${fakeroot_dir}/usr/lib"
    ln -sv /tools/lib/libstdc++.so{,.6} "${fakeroot_dir}/usr/lib"
    ln -sv bash "${fakeroot_dir}/bin/sh"
    ln -sv /proc/self/mounts "${fakeroot_dir}/etc/mtab"

    #creating first logfiles
    touch "$fakeroot_dir"/var/log/{btmp,lastlog,wtmp}
    chmod -v 664  "${fakeroot_dir}/var/log/lastlog"
    chmod -v 600  "${fakeroot_dir}/var/log/btmp"

    #installing passwd and group file
    install -v -m 644 "${build_dir}"/{passwd,group} "${fakeroot_dir}/etc/"
}

lfs_me_preinstall() {
    #check for correct environment variables and settings
    [ -z "$LFS" ] && lfs_me_error "The LFS environment variable isn't set." false
    [ ! -d "$LFS" ] && lfs_me_error "The directory '${LFS}' needs to exist." false
    [ ! -d "${LFS}/var/lfs-me/index" ] && lfs_me_error "The directory '${LFS}/var/lfs-me/index' needs to exist." false
    [ "$(readlink -f "$install_prefix")" != "$(readlink -f "$LFS")" ] && lfs_me_error "install_prefix needs to be '$LFS'" false
    [ "$(readlink -f "$index_dir")" != "$(readlink -f "${LFS}/var/lfs-me/index")" ] && lfs_me_error "index_dir needs to be '${LFS}/var/lfs-me/index'" false
    [ "$(readlink -f "$log_dir")" != "$(readlink -f "${LFS}/var/log/lfs-me")" ] && lfs_me_error "log_dir needs to be '${LFS}/var/log/lfs-me'" false

    #check toolchain
    for file in /tools/bin/{bash,cat,echo,pwd,stty,perl} /tools/lib/lib{gcc_s.so{,.1},stdc++.so{,.6}}
    do
        [ -f $file ] || lfs_me_error "Invalid toolchain '${file}' doesn't exist." false
    done

    [ "$UID" -eq 0 ] || lfs_me_error "You need to be root!" false
}

lfs_me_postinstall() {
    mknod -m 600 "${LFS}/dev/console" c 5 1
    mknod -m 666 "${LFS}/dev/null" c 1 3

    sed 's/tools/usr/' /tools/lib/libstdc++.la > "${LFS}/usr/lib/libstdc++.la"

    #change group to utmp
    chown -v :13 "${LFS}/var/log/lastlog"
}

lfs_me_preremove() {
    lfs_me_error "Removal of this package isn't supported!" false
}

# vim:set syntax=sh et:
