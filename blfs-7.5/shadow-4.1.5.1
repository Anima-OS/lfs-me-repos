#!/bin/bash
pkgname=shadow
pkgver=4.1.5.1
pkgver_postfix=

sources=( "http://cdn.debian.net/debian/pool/main/s/${pkgname}/${pkgname}_${pkgver}.orig.tar.gz" )
sha1sums=( '6e4de75de58405d21b0377b926ae770afccd95bc' )

lfs_me_prepare() {
    tar -xf "${sources_dir}/${pkgname}_${pkgver}.orig.tar.gz" -C "$build_dir"

    cd "${build_dir}/${pkgname}-${pkgver}"

    sed -i 's/groups$(EXEEXT) //' src/Makefile.in
    find man -name Makefile.in -exec sed -i 's/groups\.1 / /' {} \;

    sed -i -e 's@#ENCRYPT_METHOD DES@ENCRYPT_METHOD SHA512@' \
           -e 's@/var/spool/mail@/var/mail@' etc/login.defs

    sed -i -e 's@PATH=/sbin:/bin:/usr/sbin:/usr/bin@&:/usr/local/sbin:/usr/local/bin@' \
           -e 's@PATH=/bin:/usr/bin@&:/usr/local/bin@' etc/login.defs

    ./configure --prefix=/usr --sysconfdir=/etc --with-libcrack
}

lfs_me_build() {
    make

    mkdir config-files
    pushd config-files

    echo \
"# Begin /etc/pam.d/system-account

account   required    pam_unix.so

# End /etc/pam.d/system-account" > system-account

    echo \
"# Begin /etc/pam.d/system-auth

auth      required    pam_unix.so

# End /etc/pam.d/system-auth" > system-auth

    echo \
"# Begin /etc/pam.d/system-password

# check new passwords for strength (man pam_cracklib)
password  required    pam_cracklib.so   type=Linux retry=3 difok=5 \\
                                            difignore=23 minlen=9 dcredit=1 \\
                                                                                    ucredit=1 lcredit=1 ocredit=1 \\
                                                                                                                            dictpath=/lib/cracklib/pw_dict
# use sha512 hash for encryption, use shadow, and use the
# authentication token (chosen password) set by pam_cracklib
# above (or any previous modules)
password  required    pam_unix.so       sha512 shadow use_authtok

# End /etc/pam.d/system-password" > system-password

    echo \
"# Begin /etc/pam.d/system-session

session   required    pam_unix.so

# End /etc/pam.d/system-session" > system-session

    echo \
"# Begin /etc/pam.d/login

# Set failure delay before next prompt to 3 seconds
auth      optional    pam_faildelay.so  delay=3000000

# Check to make sure that the user is allowed to login
auth      requisite   pam_nologin.so

# Check to make sure that root is allowed to login
# Disabled by default. You will need to create /etc/securetty
# file for this module to function. See man 5 securetty.
#auth      required    pam_securetty.so

# Additional group memberships - disabled by default
#auth      optional    pam_group.so

# include the default auth settings
auth      include     system-auth

# check access for the user
account   required    pam_access.so

# include the default account settings
account   include     system-account

# Set default environment variables for the user
session   required    pam_env.so

# Set resource limits for the user
session   required    pam_limits.so

# Display date of last login - Disabled by default
#session   optional    pam_lastlog.so

# Display the message of the day - Disabled by default
#session   optional    pam_motd.so

# Check user's mail - Disabled by default
#session   optional    pam_mail.so      standard quiet

# include the default session and password settings
session   include     system-session
password  include     system-password

# End /etc/pam.d/login" > login

    echo \
"# Begin /etc/pam.d/passwd

password  include     system-password

# End /etc/pam.d/passwd" > passwd

    echo \
"# Begin /etc/pam.d/su

# always allow root
auth      sufficient  pam_rootok.so
auth      include     system-auth

# include the default account settings
account   include     system-account

# Set default environment variables for the service user
session   required    pam_env.so

# include system session defaults
session   include     system-session

# End /etc/pam.d/su" > su

    echo \
"#Begin /etc/pam.d/chage

# always allow root
auth      sufficient  pam_rootok.so

# include system defaults for auth account and session
auth      include     system-auth
account   include     system-account
session   include     system-session

# Always permit for authentication updates
password  required    pam_permit.so

# End /etc/pam.d/chage" > chage

    echo \
"# Begin /etc/pam.d/other

auth        required        pam_warn.so
auth        required        pam_deny.so
account     required        pam_warn.so
account     required        pam_deny.so
password    required        pam_warn.so
password    required        pam_deny.so
session     required        pam_warn.so
session     required        pam_deny.so

# End /etc/pam.d/other" > other

    popd

}

lfs_me_check() {
    return
}

lfs_me_install() {
    make DESTDIR="$fakeroot_dir" install
    mv -v "${fakeroot_dir}/usr/bin/passwd" "${fakeroot_dir}/bin"

    mkdir -pv "${fakeroot_dir}/etc/pam.d"
    install -v -m644 /etc/login.defs "${fakeroot_dir}/etc/login.defs.orig"
    for FUNCTION in FAIL_DELAY FAILLOG_ENAB \
        LASTLOG_ENAB \
        MAIL_CHECK_ENAB \
        OBSCURE_CHECKS_ENAB \
        PORTTIME_CHECKS_ENAB \
        QUOTAS_ENAB \
        CONSOLE MOTD_FILE \
        FTMP_FILE NOLOGINS_FILE \
        ENV_HZ PASS_MIN_LEN \
        SU_WHEEL_ONLY \
        CRACKLIB_DICTPATH \
        PASS_CHANGE_TRIES \
        PASS_ALWAYS_WARN \
        CHFN_AUTH ENCRYPT_METHOD \
        ENVIRON_FILE
    do
        sed -i "s/^${FUNCTION}/# &/" "${fakeroot_dir}/etc/login.defs"
    done

    cp -v config-files/* "${fakeroot_dir}/etc/pam.d/"

    for PROGRAM in chfn chgpasswd chpasswd chsh groupadd groupdel \
           groupmems groupmod newusers useradd userdel usermod
    do
        install -v -m644 "${fakeroot_dir}/etc/pam.d/chage" "${fakeroot_dir}/etc/pam.d/${PROGRAM}"
            sed -i "s/chage/$PROGRAM/" "${fakeroot_dir}/etc/pam.d/${PROGRAM}"
    done
}

lfs_me_postinstall() {
    [ -f /etc/login.access ] && mv -v /etc/login.access{,.NOUSE}
    [ -f /etc/limits ] && mv -v /etc/limits{,.NOUSE}
}

lfs_me_postremove() {
    [ -f /etc/login.access.NOUSE ] && mv -v /etc/login.access{.NOUSE,}
    [ -f /etc/limits.NOUSE ] && mv -v /etc/limits{.NOUSE,}
}
